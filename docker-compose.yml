version: "3.8"

services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: mini_pos
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./migration.sql:/docker-entrypoint-initdb.d/migration.sql
    ports:
      - "5432:5432"
    networks:
      - dockernet

  pgadmin:
      image: dpage/pgadmin4:latest
      restart: always
      environment:
        PGADMIN_DEFAULT_EMAIL: admin@admin.com
        PGADMIN_DEFAULT_PASSWORD: root
      ports:
        - "5050:80"
      depends_on:
        - db
      networks:
        - dockernet

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: db
      DB_USER: postgres
      DB_PASSWORD: root
      DB_NAME: mini_pos
      DB_PORT: "5432"
      PORT: "8081"
    ports:
      - "8081:8081"
    depends_on:
      - db
    networks:
      - dockernet

  transaction-service:
    build:
      context: ./transaction-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: db
      DB_USER: postgres
      DB_PASSWORD: root
      DB_NAME: mini_pos
      DB_PORT: "5432"
      DB_SSLMODE: disable
      PORT: "8082"
      # pakai nama service product-service (bukan localhost) agar container bisa resolve
      PRODUCT_SERVICE_URL: http://product-service:8081
    ports:
      - "8082:8082"
    depends_on:
      - db
      - product-service
    networks:
      - dockernet

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      PORT: "8080"
      PRODUCT_SERVICE_URL: http://product-service:8081
      TRANSACTION_SERVICE_URL: http://transaction-service:8082
    ports:
      - "8080:8080"
    depends_on:
      - product-service
      - transaction-service
    networks:
      - dockernet

volumes:
  db_data:

networks:
  dockernet: